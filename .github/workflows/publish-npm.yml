name: Publish to npm

on:
  release:
    types: [published]

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest
    
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
    
    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Extract version from release
      id: version
      run: |
        # Extract version from release tag
        RELEASE_TAG="${{ github.event.release.tag_name }}"
        VERSION=${RELEASE_TAG#v}  # Remove 'v' prefix
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"
    
    - name: Update package.json version
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Update version in package.json
        node -e "
          const pkg = require('./package.json');
          pkg.version = '$VERSION';
          require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
        "
        echo "Updated package.json to version $VERSION"
        
        # Verify the update worked
        UPDATED_VERSION=$(node -p "require('./package.json').version")
        if [ "$UPDATED_VERSION" != "$VERSION" ]; then
          echo "‚ùå Error: Version was not updated correctly"
          echo "Expected: $VERSION, Got: $UPDATED_VERSION"
          exit 1
        fi
        echo "‚úÖ Version updated successfully: $UPDATED_VERSION"
    
    - name: Build project
      run: pnpm run build:prod
    
    - name: Run tests
      run: pnpm run test:run
    
    - name: Publish to npm
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Update main branch with new version
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Git configuration
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Checkout main branch
        git checkout main || {
          echo "‚ùå Error: Could not checkout main branch"
          exit 1
        }
        
        # Fetch latest changes without pulling tags
        git fetch origin main || {
          echo "‚ùå Error: Could not fetch latest changes"
          exit 1
        }
        
        # Reset to origin/main to get latest changes
        git reset --hard origin/main || {
          echo "‚ùå Error: Could not reset to origin/main"
          exit 1
        }
        
        # Update package.json version
        node -e "
          const pkg = require('./package.json');
          pkg.version = '$VERSION';
          require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
        "
        
        # Add and commit changes
        git add package.json
        git commit -m "Bump version to $VERSION [skip ci]" || {
          echo "‚ùå Error: Could not commit changes"
          exit 1
        }
        
        # Push to main
        git push origin main || {
          echo "‚ùå Error: Could not push to main"
          exit 1
        }
        
        echo "‚úÖ package.json updated on main branch"
    
    - name: Success message
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        echo "üéâ Publication v$VERSION successful!"
        echo "üì¶ Package published on npm"
        echo "üìù package.json updated in main"
        echo "üîó Release: ${{ github.event.release.html_url }}"
        echo "üì¶ npm: https://www.npmjs.com/package/classigo"
