name: Publish to npm

on:
  release:
    types: [published]

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest
    
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
    
    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Extract version from release
      id: version
      run: |
        # Extraire la version du tag de la release
        RELEASE_TAG="${{ github.event.release.tag_name }}"
        VERSION=${RELEASE_TAG#v}  # Enl√®ve le 'v' du d√©but
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"
    
    - name: Update package.json version
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Mettre √† jour la version dans package.json
        node -e "
          const pkg = require('./package.json');
          pkg.version = '$VERSION';
          require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
        "
        echo "Updated package.json to version $VERSION"
        
        # V√©rifier que la mise √† jour a fonctionn√©
        UPDATED_VERSION=$(node -p "require('./package.json').version")
        if [ "$UPDATED_VERSION" != "$VERSION" ]; then
          echo "‚ùå Erreur: La version n'a pas √©t√© mise √† jour correctement"
          echo "Attendu: $VERSION, Obtenu: $UPDATED_VERSION"
          exit 1
        fi
        echo "‚úÖ Version mise √† jour avec succ√®s: $UPDATED_VERSION"
    
    - name: Build project
      run: |
        pnpm run build:prod
        
        # V√©rifier que les fichiers de build existent
        if [ ! -f "./dist/index.mjs" ] || [ ! -f "./dist/index.cjs" ] || [ ! -f "./dist/index.d.ts" ]; then
          echo "‚ùå Erreur: Les fichiers de build n'ont pas √©t√© cr√©√©s"
          echo "Contenu du dossier dist:"
          ls -la ./dist/ || echo "Dossier dist n'existe pas"
          exit 1
        fi
        echo "‚úÖ Build r√©ussi, fichiers cr√©√©s:"
        ls -la ./dist/
    
    - name: Run tests
      run: |
        pnpm run test:run
        
        if [ $? -ne 0 ]; then
          echo "‚ùå Erreur: Les tests ont √©chou√©"
          exit 1
        fi
        echo "‚úÖ Tests r√©ussis"
    
    - name: Commit and push package.json update
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Configuration Git
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Ajouter et commiter les changements
        git add package.json
        git commit -m "Bump version to $VERSION [skip ci]"
        
        # Push vers main
        git push origin main || {
          echo "‚ùå Erreur lors du push vers main"
          exit 1
        }
        
        echo "‚úÖ package.json mis √† jour et pouss√© vers main"
    
    - name: Publish to npm
      run: |
        echo "üì¶ Publication sur npm..."
        
        # V√©rifier si on est connect√© √† npm
        npm whoami || {
          echo "‚ùå Erreur: Non connect√© √† npm"
          echo "Veuillez configurer NPM_TOKEN dans les secrets GitHub"
          exit 1
        }
        
        # Publier le package
        npm publish --access public || {
          echo "‚ùå Erreur lors de la publication npm"
          exit 1
        }
        
        echo "‚úÖ Publication npm r√©ussie"
    
    - name: Success message
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        echo "üéâ Publication v$VERSION r√©ussie !"
        echo "üì¶ Package publi√© sur npm"
        echo "üìù package.json mis √† jour dans main"
        echo "üîó Release: ${{ github.event.release.html_url }}"
        echo "üì¶ npm: https://www.npmjs.com/package/classigo"
